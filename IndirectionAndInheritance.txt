References and Inheritance:
1) base class reference ca nactually refer t oa derived class instance
2) Respects the is a relationship
3) vital to Liskov substitutability

any base class function can be called through a base reference to a derived instance 
- virtual function - derived class function executes 
 polymorphism
- nonvirtual function - base class function executes

can't call derived class functions:
- compiler only knows this is a base class reference

can't create a "derived class reference" that refers to a base class instance. - some derived class member variable would be missing

pointer and inheritance
A "pointer to a base class" can actaully point to a derived class instance.
Any base class function can then be called through the pointer
- virtual function - derived class function executes
- nonvirtual function - base class function executes
- this is c++ - you get to choose

can't aim to "pointer to derived class" at a base class instance
- some derived-class member variables would be missing

smart pointers and inheritance:
same rules when using smart pointers
smart pointers act like regular pointers and that includes polymorphism
