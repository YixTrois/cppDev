reference:
1) can on ly set target when declaring it
2) all other actions go through the reference
3) cannot be made to refer to something else

Pointers:
1) can point to somethign that exists
2) can point "nowhere"
3) can be made to point to something else

int* pA = &A; // take the address of the a, and put that into pA // modern people tend to write this way.
int *pA = &A; // space around the * do not matter

*pA = 5; to get through the pointer to its target 

Person Kate("Kate", "Gregory", 234);
Person* pKate = &Kate;
name = (*pKate).GetName();
name = pKate->GetName();  // shortcut for (*p)

null pointer:
not pointing to anything.   0
NULL    nullptr // modern way of saying null pointer

const:
A way to commit to the ocmpiler you won't change something
- when declaring a local variable
   int const zero = 0;
   // so that other people won't change this value
- As a function parameter
    int foo(int const i) // i doesn't change in the function 
    int something(Person const& p) // this is more commonly used, we are taking p by reference since we want to save the cost by copying the whole object Person
- Modiffier on a member function
    int GetName() const; // this member function doesn't change the member variables.

const correctness after it is built is difficult.

const after is better: int const ci = 3 instead of const int ci = 3;

const with indirection:
- references cannot retarget
- so const means you can't chagne the value
int const & rI // we can't change the value of rI

you can declare the pointer to be const 
int * const cpI // then you can't change it to point somewhere else.

you can declare that the pointer points at something const
int const * cpI 
then you can't use it to change the value of the target. for example: * cpI = 2 wont compiler

extreme case: 
int const * const crazy // declare the pointer is const and it points at somethign const.
// which means that you can't chagne ti to point somewhere else or use it to change the value of the target.

in cpp, there is no type that is a pointer, it is always pointer to some certain type.

Pointers and references provide another way to accss memory
- references ahve simpler sytax
Const keeps your programs correctness
- Functions that take literal values need to be aware of const
- Const-correctness spreads through yoru code
- If you take a reference for speed, you should take a const refrence
- many operator overloads, construcotrs and other "canonical" functions take const references.